/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py:835: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  _3dssg_scenes = torch.load('../data_checkpoints/processed_data/3dssg/3dssg_graphs_processed_edgelists_relationembed.pt')
100%|█████████████████████████████████████| 1335/1335 [00:00<00:00, 2294.48it/s]
/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py:846: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  scanscribe_scenes = torch.load('../data_checkpoints/processed_data/training/scanscribe_graphs_train_final_no_graph_min.pt')
100%|████████████████████████████████████████| 163/163 [00:00<00:00, 281.81it/s]
number of scanscribe graphs before removing graphs with 1 edge: 3356
number of scanscribe graphs after removing graphs with 1 edge: 3159
/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py:873: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  scanscribe_scenes_test = torch.load('../data_checkpoints/processed_data/testing/scanscribe_graphs_test_final_no_graph_min.pt')
100%|█████████████████████████████████████████| 55/55 [00:00<00:00, 1185.53it/s]
number of scanscribe test graphs before removing: 1116
number of scanscribe test graphs after removing: 1116
/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py:897: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  h_graphs_test = torch.load('../data_checkpoints/processed_data/human/human_graphs_processed.pt')
to remove human_graphs, hopefully none: ['c9fb7aa1-2a5b-2cf7-9222-6f111cb28b2b_2', 'bf9a3da4-45a5-2e80-8082-be634b241693_0']
SCANSCRIBE b_n: 2400000, b_e: 279456, b_f: 20959200, total: 23638656
HUMAN b_n_h: 6075600, b_e_h: 628272, b_f_h: 47120400, total: 53824272
length of training set in fold 0: 2857
length of validation set in fold 0: 302
  0%|                                                   | 0/100 [08:52<?, ?it/s]
Traceback (most recent call last):
  File "/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py", line 964, in <module>
    model = train_with_cross_val(database_3dssg=_3dssg_graphs,
  File "/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py", line 544, in train_with_cross_val
    _ = train(model=model,
  File "/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/train_V2.py", line 104, in train
    x_p, p_p, m_p = model(
  File "/home/klrshak/work/VisionLang/coarseLocal_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/klrshak/work/VisionLang/coarseLocal_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/model_graph2graph.py", line 70, in forward
    edge_index_2_cross, edge_attr_2_cross = make_cross_graph(x_2.shape, x_1.shape) # First half of x_2_cross should be the original x_2
  File "/home/klrshak/work/VisionLang/whereami-text2sgm/playground/graph_models/models/../../../playground/graph_models/src/utils.py", line 150, in make_cross_graph
    edge_index_cross = torch.cat((edge_index_cross, torch.tensor([[i], [x_1_dim + j]], dtype=torch.long)), dim=1)
KeyboardInterrupt
Exception ignored in atexit callback: <function _start_and_connect_service.<locals>.teardown_atexit at 0x75ae6aa09360>
Traceback (most recent call last):
  File "/home/klrshak/work/VisionLang/coarseLocal_env/lib/python3.10/site-packages/wandb/sdk/lib/service_connection.py", line 94, in teardown_atexit
    conn.teardown(hooks.exit_code)
  File "/home/klrshak/work/VisionLang/coarseLocal_env/lib/python3.10/site-packages/wandb/sdk/lib/service_connection.py", line 226, in teardown
    self._router.join()
  File "/home/klrshak/work/VisionLang/coarseLocal_env/lib/python3.10/site-packages/wandb/sdk/interface/router.py", line 75, in join
    self._thread.join()
  File "/usr/lib/python3.10/threading.py", line 1096, in join
    self._wait_for_tstate_lock()
  File "/usr/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt:
